stage('Scale ECS Services Based on Cluster') {   
        steps {
            script {
                withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                    withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                        if (op_ecs == 'none') {
                            echo "operationType is 'none', skipping the scaling step."
                            return
                        }
                        if (dmuserchoice == 'startdm_in_performance_mode') {
                        echo "dmuserchoice is 'startdm_in_performance_mode"
                        return
                        }
                    // select ecs cluster based on that it will select rds cluster
                    if (ecs_cluster == "dm-ecs-cluster" || ecs_cluster == "crfs-rc1-novus-ecs" || ecs_cluster == "cos-ecs-cluster" || ecs_cluster == "dm-bpocloud-cluster") {
                            rds_cluster1 = "dm-rds-cluster-v2"
                    }  else if (ecs_cluster == "dm2-ecs-cluster") {
                            rds_cluster1 = "dm2-rds-cluster"
                    } else {
                        rds_cluster1 = "RDS_CLUSTER1_NOT_FOUND"
                    }
                if (rds_cluster1 == "RDS_CLUSTER1_NOT_FOUND") {
                       echo "No rds associated with ecs cluster $rds_cluster1. proceeding with desired capacity update on ecs cluster"
                } else {
                    def db_status = sh(
                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster1 --query DBClusters[0].Status | xargs",
                        returnStdout: true
                    ).trim()
                                    switch (op_ecs) {
                                        case "start":
                                            if (db_status == "available") {
                                                echo "RDS cluster $rds_cluster1 is already available. No action needed."
                                            } else {
                                                echo "Starting RDS cluster as ECS service is set to start."
                                                def db_start = sh(
                                                    script: "aws rds start-db-cluster --db-cluster-identifier $rds_cluster1 | xargs",
                                                    returnStdout: true
                                                ).trim()
                                                echo "RDS cluster $rds_cluster1 is starting..."

                                                // Wait for the RDS cluster to become available
                                                while (db_status != "available") {
                                                    echo "RDS Cluster not available. Waiting 60 seconds..."
                                                    sleep(60)
                                                    db_status = sh(
                                                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster1 --query DBClusters[0].Status | xargs",
                                                        returnStdout: true
                                                    ).trim()
                                                }
                                                echo "RDS cluster $rds_cluster1 is now available."
                                        
                                            }
                                            break

                                        case "stop":
                                        echo "No action needed associated with the selected ECS cluster: $rds_cluster1. Skipping rds update."
                                        break
                                    }
                }
                    def desired_counts_asg = [:]
                    if (ecs_cluster == "dm2-ecs-cluster") {
                        desired_counts_asg = [
                            "dm2-ec2-ecs": [desired: 5, min: 4, max: 6]
                        ]
                    } else if (ecs_cluster == "dm-ecs-cluster") {
                        desired_counts_asg = [
                            "dm-ec2-ecs": [desired: 5, min: 4, max: 6]
                        ]
                    } else if (ecs_cluster == "crfs-rc1-novus-ecs") {
                        desired_counts_asg = [
                            "crfs-rc1-novus-ecs-asg": [desired: 2, min: 1, max: 3]
                        ]
                    }

                    if (desired_counts_asg) {
                        desired_counts_asg.each { asg, count ->
                            def desired_cap_asg = count.desired
                            def min_cap_asg = count.min
                            def max_cap_asg = count.max
                            // Retrieve suspended processes for the ASG
                            def suspended_processes = sh(
                                script: "aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $asg --query 'AutoScalingGroups[0].SuspendedProcesses[*].ProcessName' --output text",
                                returnStdout: true
                            ).trim()

                            if (!suspended_processes.isEmpty()) {
                                echo "Suspended processes found for ASG $asg: $suspended_processes"
                                // Resume suspended processes
                                sh(script: "aws autoscaling resume-processes --auto-scaling-group-name $asg", returnStdout: true)
                                echo "Resumed suspended processes for ASG $asg"
                            } else {
                                echo "No suspended processes found for ASG $asg"
                            }
                            switch (op_ecs) {
                                case "start":
                                    echo "Updating ASG $asg: Desired Capacity: $desired_cap_asg, Minimum Capacity: $min_cap_asg, Maximum Capacity: $max_cap_asg"
                                    // Update the Auto Scaling Group using AWS CLI
                                    sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg --desired-capacity $desired_cap_asg --min-size $min_cap_asg --max-size $max_cap_asg", returnStdout: true)

                                    // Wait for EC2 instances to be in running state
                                    def ec2_instances_running = false
                                    while (!ec2_instances_running) {
                                        // Get the instance IDs in the ASG
                                        def instance_ids = sh (
                                            script: "aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $asg --query 'AutoScalingGroups[0].Instances[*].InstanceId' --output text",
                                            returnStdout: true
                                        ).trim()

                                        // Check if all instances are in running state
                                        def instance_states = sh (
                                            script: "aws ec2 describe-instances --instance-ids $instance_ids --query 'Reservations[*].Instances[*].State.Name' --output text",
                                            returnStdout: true
                                        ).trim()

                                        if (instance_states.split().every { it == "running" }) {
                                            ec2_instances_running = true
                                            echo "All EC2 instances in ASG $asg are now running."
                                        } else {
                                            echo "Waiting for EC2 instances in ASG $asg to be in running state. Retrying in 60 seconds..."
                                            sleep(60)
                                        }
                                    }
                                    break
                                case "stop":
                                    sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg --desired-capacity 0 --min-size 0  --max-size 0", returnStdout: true).trim()
                                    break
                            }
                        }
                    } else {
                        echo "No ASG associated with the selected ECS cluster: $ecs_cluster. Skipping ASG update."
                    } 
