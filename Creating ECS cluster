                           if (asg_name1 == "test2") {
                                    echo "Starting stopped instances in ASG $asg_name1"

                                    // Get stopped instance IDs tagged for this ASG
                                    def stopped_instance_ids = sh(script: "aws ec2 describe-instances --filters Name=tag:aws:autoscaling:groupName,Values=$asg_name1 Name=instance-state-name,Values=stopped --query 'Reservations[*].Instances[*].InstanceId' --output text", returnStdout: true).trim().split()

                                    if (stopped_instance_ids.isEmpty()) {
                                        echo "No stopped instances found in ASG $asg_name1. Scaling desired capacity."
                                    } else {
                                        stopped_instance_ids.each { instance_id ->
                                            echo "Starting instance $instance_id in ASG $asg_name1"
                                            sh(script: "aws ec2 start-instances --instance-ids $instance_id", returnStdout: true).trim()
                                        }
                                        echo "Started all stopped instances in ASG $asg_name1"
                                    }

                                    // Update ASG desired, min, and max capacities
                                    echo "Updating desired capacity for ASG $asg_name1 to $desired_cap"
                                    sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name1 --desired-capacity $desired_cap --min-size $min_cap --max-size $max_cap", returnStdout: true).trim()
                                    echo "ASG $asg_name1 scaled to desired capacity of $desired_cap"
                                } else {
                                    echo "Updating desired capacity for ASG $asg_name1 to $desired_cap"
                                    sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name1 --desired-capacity $desired_cap --min-size $min_cap --max-size $max_cap", returnStdout: true).trim()
                                    echo "ASG $asg_name1 scaled to desired capacity of $desired_cap"
                                }
                                break

                            case "Stop":
                                if (asg_name1 == "test2") {
                                    echo "Stopping all instances in ASG $asg_name1"
                                    def running_instance_ids = sh(script: "aws ec2 describe-instances --filters Name=tag:aws:autoscaling:groupName,Values=$asg_name1 Name=instance-state-name,Values=running --query 'Reservations[*].Instances[*].InstanceId' --output text", returnStdout: true).trim().split()

                                    running_instance_ids.each { instance_id ->
                                        echo "Stopping instance $instance_id in ASG $asg_name1"
                                        sh(script: "aws ec2 stop-instances --instance-ids $instance_id", returnStdout: true).trim()
                                    }
                                    echo "Stopped all running instances in ASG $asg_name1"
                                } else {
                                    echo "Stopping all instances in ASG $asg_name1 by setting desired capacity to 0"
                                    sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name1 --desired-capacity 0 --min-size 0 --max-size 0", returnStdout: true).trim()
                                    echo "ASG $asg_name1 scaled down to desired capacity of 0"
                                }
                                break
