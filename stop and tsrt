FROM node:22.9.0-alpine

# Install system packages including Python 3, pip, and necessary tools
RUN apk add --no-cache python3 py3-pip curl make git build-base

# Create a virtual environment using Python's built-in venv
RUN python3 -m venv /venv

# Install your required Python packages in the virtual environment
RUN /venv/bin/pip install your-package  # Replace 'your-package' with the actual package name

# Set the PATH to include the virtual environment
ENV PATH="/venv/bin:$PATH"

# Build your C code and clean up build dependencies
RUN set -ex && \
    apk add --no-cache --virtual .build-deps build-base && \
    gcc -shared -fPIC /lib/stack-fix.c -o /lib/stack-fix.so && \
    apk del .build-deps

# Optional: Clean up (uncomment if you want to clean up)
# RUN rm -rf /var/cache/apk/*

# Continue with your other build steps...
==============================================
FROM node:22.9.0-alpine

# Install system packages including Python 3, pip, and necessary tools
RUN apk add --no-cache python3 py3-pip curl make git build-base

# Create a virtual environment
RUN python3 -m venv /venv

# Install virtualenv (only if it's not already installed)
RUN /venv/bin/pip install virtualenv

# Set the PATH to include the virtual environment
ENV PATH="/venv/bin:$PATH"

# Build your C code and clean up build dependencies
RUN set -ex && \
    apk add --no-cache --virtual .build-deps build-base && \
    gcc -shared -fPIC /lib/stack-fix.c -o /lib/stack-fix.so && \
    apk del .build-deps

# Optional: Clean up (uncomment if you want to clean up)
# RUN rm -rf /var/cache/apk/*

# Continue with your other build steps...
===============================================================
FROM node:22.9.0-alpine

# Install system packages including Python 3, pip, and necessary tools
RUN apk add --no-cache python3 py3-pip curl make git build-base

# Create a virtual environment
RUN python3 -m venv /venv

# Install virtualenv (only if it's not already installed)
RUN /venv/bin/pip install virtualenv

# Activate the virtual environment and install your required Python packages
RUN /bin/sh -c "source /venv/bin/activate && pip install your-package"  # Replace 'your-package' with the actual package name

# Set the PATH to include the virtual environment
ENV PATH="/venv/bin:$PATH"

# Build your C code and clean up build dependencies
RUN set -ex && \
    apk add --no-cache --virtual .build-deps build-base && \
    gcc -shared -fPIC /lib/stack-fix.c -o /lib/stack-fix.so && \
    apk del .build-deps

# Optional: Clean up (uncomment if you want to clean up)
# RUN rm -rf /var/cache/apk/*

# Continue with your other build steps...
==========================================
FROM node:22.9.0-alpine

# Install system packages including Python 3, pip, and necessary tools
RUN apk add --no-cache python3 py3-pip curl make git build-base

# Install virtualenv Python package
RUN pip install virtualenv

# Create a virtual environment using virtualenv
RUN virtualenv /venv

# Activate the virtual environment and install your required Python packages
# Replace 'your-package' with the actual package name(s) you want to install
RUN /bin/sh -c "source /venv/bin/activate && pip install your-package"

# Set the PATH to include the virtual environment
ENV PATH="/venv/bin:$PATH"

# Build your C code and clean up build dependencies
RUN set -ex && \
    apk add --no-cache --virtual .build-deps build-base && \
    gcc -shared -fPIC /lib/stack-fix.c -o /lib/stack-fix.so && \
    apk del .build-deps

# Optional: Clean up (uncomment if you want to clean up)
# RUN rm -rf /var/cache/apk/*

# Continue with your other build steps...
============================
FROM node:22.9.0-alpine

# Install system packages including Python 3, pip, and necessary tools
RUN apk add --no-cache python3 py3-pip curl make git build-base

# Install virtualenv
RUN pip install virtualenv

# Create a virtual environment using virtualenv
RUN virtualenv /venv

# Activate the virtual environment and install your required Python packages
RUN /bin/sh -c "source /venv/bin/activate && pip install your-package"  # Replace 'your-package' with the actual package name

# Set the PATH to include the virtual environment
ENV PATH="/venv/bin:$PATH"

# Build your C code and clean up build dependencies
RUN set -ex && \
    apk add --no-cache --virtual .build-deps build-base && \
    gcc -shared -fPIC /lib/stack-fix.c -o /lib/stack-fix.so && \
    apk del .build-deps

# Optional: Clean up (uncomment if you want to clean up)
# RUN rm -rf /var/cache/apk/*

# Continue with your other build steps...
================================
FROM node:22.9.0-alpine

# Install system packages including Python 3, pip, and necessary tools
RUN apk add --no-cache python3 py3-pip curl make git build-base

# Install virtualenv (only if it's not already installed in your base image)
RUN pip install virtualenv

# Create a virtual environment using virtualenv
RUN virtualenv /venv

# Activate the virtual environment and install your required Python packages
RUN /bin/sh -c "source /venv/bin/activate && pip install your-package"  # Replace 'your-package' with the actual package name

# Set the PATH to include the virtual environment
ENV PATH="/venv/bin:$PATH"

# Build your C code and clean up build dependencies
RUN set -ex && \
    apk add --no-cache --virtual .build-deps build-base && \
    gcc -shared -fPIC /lib/stack-fix.c -o /lib/stack-fix.so && \
    apk del .build-deps

# Optional: Clean up (uncomment if you want to clean up)
# RUN rm -rf /var/cache/apk/*

# Continue with your other build steps...
=========================================
FROM node:22.9.0-alpine

# Install system packages including Python 3, pip, and necessary tools
RUN apk add --no-cache python3 py3-pip curl make git build-base

# Create a virtual environment
RUN python3 -m venv /venv

# Activate the virtual environment and install your required Python packages
RUN /bin/sh -c "source /venv/bin/activate && pip install your-package"  # Replace 'your-package' with the actual package name

# Set the PATH to include the virtual environment
ENV PATH="/venv/bin:$PATH"

# Build your C code and clean up build dependencies
RUN set -ex && \
    apk add --no-cache --virtual .build-deps build-base && \
    gcc -shared -fPIC /lib/stack-fix.c -o /lib/stack-fix.so && \
    apk del .build-deps

# Optional: Clean up (uncomment if you want to clean up)
# RUN rm -rf /var/cache/apk/*

# Continue with your other build steps...
