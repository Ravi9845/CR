pipeline {
  agent {
		label 'ams'
	}
  environment{
    // AWS_DEPLOYMENT_REGION = "$env.AWS_DEPLOYMENT_REGION"
    AWS_DEPLOYMENT_REGION = "us-east-1"
    // STAGE = "$env.STAGE"
    STAGE = "RC1"
    AWS_CREDENTIAL = "aws_account_id_${STAGE.toLowerCase()}_${AWS_DEPLOYMENT_REGION.replace('-', '_')}"
	  AWS_ACCOUNT_ID = ''
    AWS_IAM_ROLE_NAME = 'customer-environment-shutdown-startup'
    CICD_REGION = 'us-east-1'
    CICD_REGION_ROLE = ''
	  CICD_CREDENTIAL = 'aws_account_id_cicd_us_east_1'
	  CICD_ACCOUNT_ID = '' // Instance="$env.EC2_Instance"
    EC2_Instance="$env.EC2_Instance"
    def InstanceId=" "
    def InstanceId_asg=" "
    def instance_status=" "
    def asg_name = " "
    def op = "$env.EC2_operations"
    def rds_flag= "$env.rdsFlag"
    def rds_cluster ="$env.RDS_cluster"
    def ecs_cluster ="$env.ECS_cluster"
    def op_ecs="$env.ECS_operations"
    def eks_cluster ="$env.EKS_cluster"
    def eks_nodegroup ="$env.EKS_NodeGroup"
    def op_eks="$env.EKS_operations"
    def asg_name1 ="$env.ASG_name"
    def op1 ="$env.asg_operation"

    
  }
  stages {
    stage('Setup Environment') {
			steps {
				script {
					switch (AWS_DEPLOYMENT_REGION) {
						case "us-east-1":
							CICD_REGION_ROLE = 'jenkins-pipeline-assume-role'
							break
						case "eu-west-2":
							CICD_REGION_ROLE = 'jenkins-pipeline-assume-role-euw2'
							break
						case "eu-central-1":
                            CICD_REGION_ROLE = 'jenkins-pipeline-assume-role-euc1'
							break
					}
					withCredentials([string(credentialsId: CICD_CREDENTIAL, variable: 'CICD_ACCOUNT')]) {
						CICD_ACCOUNT_ID = CICD_ACCOUNT
					}

					withCredentials([string(credentialsId: AWS_CREDENTIAL, variable: 'ACCOUNT_ID')]) {
						AWS_ACCOUNT_ID = ACCOUNT_ID
					}
				}
			}
    }
    stage('start EC2 instance'){
      steps{
        script{
          withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
            withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                try{
                  // to store the instance id
                   InstanceId = sh(script:'aws ec2 describe-instances --filters Name=tag:Name,Values=$EC2_Instance --query "Reservations[*].Instances[*].InstanceId" --output text', returnStdout:true).trim()
                  def lines = InstanceId.readLines()
                    InstanceId_asg  =lines[0].trim()
                  echo "$EC2_Instance ID is $InstanceId"

                  // get instance status
                   instance_status = sh(script:'aws ec2 describe-instances --filters "Name=tag:Name,Values=$EC2_Instance" "Name=instance-state-name,Values=running,stopped" | jq \'.Reservations[0].Instances[0].State.Name\' | tr -d \'"\'' , returnStdout:true).trim()    
                     
                  switch ("$op"){

                    case "Start":
                          if ("$instance_status"=="stopped"){
                            start_instances = sh(script: "aws ec2 start-instances --instance-ids $InstanceId", returnStdout:true).trim()
                            echo "Instance $InstanceId is now started"
                          }
                          else if ("$instance_status"=="running"){
                              echo "Instance $InstanceId is already running"
                          }
                          else{
                            echo "ERROR"
                          }
                    break;

                    case "Stop":
                          if ("$instance_status"=="stopped"){
                            echo "Instance $InstanceId is already in stop state"
                          }
                          else if ("$instance_status"=="running"){
                            stop_instances = sh(script: "aws ec2 stop-instances --instance-ids $InstanceId", returnStdout:true).trim()
                            echo "Stopped - $InstanceId"
                          }
                    break;

                    case "Status":
                          echo "EC2 status - $instance_status" 
                    break;
                  }
                }
                catch(err){
                  echo "ERROR CAUGHT: $err"
                }           
            }
          }
        }
      }
    }
        stage('Scale Up ASG') {
            steps {
                script {
                    withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                        withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                            try {
                                // Mapping for desired and minimum capacities
                                def capacityMap = [
                                    "crfs-rc1-novus-ecs-asg": [desired: 2, min: 1, max: 3],
                                    "stack-crmjrlk0dcbvtnvzp-FileserviceUtilASG-1DW3MV41UIJ0O": [desired: 1, min: 1, max: 2],
                                    "dm-ec2-pgadmin": [desired: 1, min: 1, max: 2],
                                    "stack-sq4jdyob2dqlwybkc-DMRuleServerUtilASG-LaqRULBI1eEL": [desired: 0, min: 0, max: 0],
                                    "dm-ec2-etl": [desired: 2, min: 2, max: 3],
                                    "dm2-ec2-ecs": [desired: 4, min: 4, max: 5],
                                    "dm-rule-server-rc1-utility-host-DMRuleServerUtilASG-1P370Q8E8TN24": [desired: 1, min: 1, max: 2],
                                    "dm-ec2-openoffice": [desired: 1, min: 1, max: 2],
                                    "eks-rc1-smarts-nodegroup-20c7b217-f25a-9811-1b30-e5863ffc6d8c": [desired: 4, min: 4, max: 5],
                                    "stack-zflgbkzclpewvcapp-ASG-de71l2E4Wut6": [desired: 2, min: 1, max: 3],
                                    "dm-ec2-ecs": [desired: 3, min: 3, max: 4],
                                    "stack-r3yujqsnuergidy3i-ASG-12OZ53CZMQYA1": [desired: 1, min: 1, max: 2]
                                ]
                                
                                // Check if the ASG name exists in the capacityMap
                                if (!capacityMap.containsKey(asg_name1)) {
                                    error "Auto Scaling Group '$asg_name1' not found in the capacity map."
                                }

                                // Retrieve desired and minimum capacities
                                def desired_cap = capacityMap[asg_name1].desired
                                def min_cap = capacityMap[asg_name1].min
                                def max_cap = capacityMap[asg_name1].max
                                
                                echo "Auto Scaling Group: $asg_name1, Desired Capacity: $desired_cap, Minimum Capacity: $min_cap, maximun Capacity: $max_cap"

                                // Check for suspended processes in the Auto Scaling Group
                                def suspended_processes = sh(script: "aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $asg_name1 --query 'AutoScalingGroups[0].SuspendedProcesses[*].ProcessName' --output text", returnStdout: true).trim()

                                if (!suspended_processes.isEmpty()) {
                                    echo "Suspended processes found for ASG $asg_name1: $suspended_processes"
                                    // Resume suspended processes
                                    sh(script: "aws autoscaling resume-processes --auto-scaling-group-name $asg_name1", returnStdout: true).trim()
                                    echo "Resumed suspended processes for ASG $asg_name1"
                                } else {
                                    echo "No suspended processes found for ASG $asg_name1"
                                }

                                // Scale up or down the Auto Scaling Group based on the operation
                                switch (op1) {
                                    case "Start":
                                        echo "Updating desired capacity for ASG $asg_name1 to $desired_cap"
                                        sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name1 --desired-capacity $desired_cap --min-size $min_cap --max-size $max_cap", returnStdout: true).trim()
                                        echo "ASG $asg_name1 scaled to desired capacity of $desired_cap"

                                        // Wait for instances to launch and check their state
                                        def instance_state = sh(script: "aws autoscaling describe-auto-scaling-instances --query 'AutoScalingInstances[?AutoScalingGroupName==\"$asg_name1\"].LifecycleState' --output text", returnStdout: true).trim()
                                        echo "Instance states for ASG $asg_name1: $instance_state"
                                        break;

                                    case "Stop":
                                        echo "Stopping all instances in ASG $asg_name1 by setting desired capacity to 0"
                                        sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name1 --desired-capacity 0 --min-size 0  --max-size 0", returnStdout: true).trim()
                                        echo "ASG $asg_name1 scaled down to desired capacity of 0"
                                        break;

                                    default:
                                        echo "No valid operation specified"
                                        break;
                                }
                            } catch (err) {
                                echo "ERROR CAUGHT: $err"
                            }
                        }
                    }
                }
            }
        }
      stage('starting RDS cluster') {
        steps{
        script{
          withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
            withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
            
                            if (rds_cluster != "none") {
                                try {
                                    // Check the current status of the RDS cluster
                                    def db_status = sh(
                                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster --query DBClusters[0].Status | xargs",
                                        returnStdout: true
                                    ).trim()

                                    // Determine action based on desired operation and current status
                                    switch (op_ecs) {
                                        case "start":
                                            if (db_status == "available") {
                                                echo "RDS cluster $rds_cluster is already available. No action needed."
                                                rds_operation_success = true  // Set flag to true since no action was needed
                                            } else {
                                                echo "Starting RDS cluster as ECS service is set to start."
                                                def db_start = sh(
                                                    script: "aws rds start-db-cluster --db-cluster-identifier $rds_cluster | xargs",
                                                    returnStdout: true
                                                ).trim()
                                                echo "RDS cluster $rds_cluster is starting..."

                                                // Wait for the RDS cluster to become available
                                                while (db_status != "available") {
                                                    echo "RDS Cluster not available. Waiting 60 seconds..."
                                                    sleep(60)
                                                    db_status = sh(
                                                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster --query DBClusters[0].Status | xargs",
                                                        returnStdout: true
                                                    ).trim()
                                                }
                                                echo "RDS cluster $rds_cluster is now available."
                                                rds_operation_success = true  // Set flag to true when RDS is started successfully
                                            }
                                            break

                                        case "stop":
                                            if (db_status == "stopped") {
                                                echo "RDS cluster $rds_cluster is already stopped. No action needed."
                                                rds_operation_success = true  // Set flag to true since no action was needed
                                            } else {
                                                echo "Stopping RDS cluster as ECS service is set to stop."
                                                def db_stop = sh(
                                                    script: "aws rds stop-db-cluster --db-cluster-identifier $rds_cluster | xargs",
                                                    returnStdout: true
                                                ).trim()
                                                echo "RDS cluster $rds_cluster is stopping..."
                                                rds_operation_success = true  // Set flag to true when RDS is stopped successfully
                                            }
                                            break

                                        default:
                                            echo "No valid operation specified for RDS cluster."
                                            rds_operation_success = false
                                    }
                                } catch (err) {
                                    echo "Failed to manage RDS cluster: $err"
                                    error("Exiting pipeline due to RDS cluster management failure.")
                                }
                            } else {
                                echo "No RDS cluster specified."
                            }
                        }
                    }
                }
            }
        }

    stage('Scale ECS Services Based on Cluster') {
        when {
          expression { rds_operation_success }  // Execute this stage only if RDS operation was successful
        }    
        steps {
            script {
                withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                    withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                        
                        // Define the desired counts for services based on cluster
                        def desired_counts = [:]
                        if (ecs_cluster == "crfs-ui-cluster") {
                            desired_counts = [
                                "crfs-ui": "2"
                            ]
                        } else if (ecs_cluster == "cos-ecs-cluster") {
                            desired_counts = [
                                "cos-app-service": "1",
                                "cos-flyway": "1"
                            ]
                        } else if (ecs_cluster == "crfs-rc1-novus-ecs") {
                            desired_counts = [
                                "crfs-configuration": "1",
                                "crfs-file-processing": "1",
                                "crfs-flyway-migration": "1",
                                "crfs-security": "1"
                            ]
                        } else if (ecs_cluster == "dm2-ecs-cluster") {
                            desired_counts = [
                                "dm2-Batch": "2",
                                "dm2-BlazeRMA": "1",
                                "dm2-FileProcessor": "1",
                                "dm2-RestAPI": "2"
                            ]
                        } else if (ecs_cluster == "dm-tenant-admin-cluster") {
                            desired_counts = [
                                "dm-tenant-admin": "1",
                                "dm2-tenant-admin": "1"
                            ]
                        } else if (ecs_cluster == "dm-flyway-cluster") {
                            desired_counts = [
                                "dm-flyway": "1",
                                "dm2-flyway": "1"
                            ]
                        } else if (ecs_cluster == "dm-ecs-cluster") {
                            desired_counts = [
                                "dm-Batch": "2",
                                "dm-BlazeRMA": "1",
                                "dm-FileProcessor": "1",
                                "dm-RestAPI": "2"

                            ]
                        }            
                        // Check the operation type (start or stop)
                        def operationType = op_ecs
                        echo "Operation Type: ${operationType}"
    
                        // Iterate over the services in the desired_counts map and update their desired count
                        desired_counts.each { service, count ->
                            // Determine the desired count based on operation type
                            def desired_count = operationType == 'start' ? count : "0" // Use the desired count when starting, or set to zero when stopping
    
                            echo "Scaling service ${service} to desired count: ${desired_count}"
    
                            // Execute the scaling command
                            def scale_service = sh (
                                script: "aws ecs update-service --cluster $ecs_cluster --service $service --desired-count $desired_count",
                                returnStdout: true
                            ).trim()
    
                            echo "Scaled service $service in cluster $ecs_cluster to desired count $desired_count"
                        }
                    }
                }
              }
            } 
         }
    stage('Scale EKS Node Group') {
        steps {
            script {
                withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                    withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                        
                        def desired_capacities = [
                        "dm-smarts-nodegroup": "1",
                        "dm-smarts-nodegroup-ps4": "4",
                        "dm-smarts-nodegroup-ps34": "1"
                        ]
    
                        // Check the operation type (start or stop)
                        def operationType = op_eks
                        echo "Operation Type: ${operationType}"

                        // Exit the stage early if operation type is non
                        if (operationType == 'none') {
                            echo "operationType is 'none', skipping the scaling step."
                            return
                        }
    
                        // Get the desired capacity for the selected node group
                        def selected_capacity = desired_capacities[eks_nodegroup]
    
                        if (selected_capacity != null) {
                            // Initialize scaling parameters
                            def min_size, max_size, desired_size
    
                            // Use switch to determine scaling parameters based on operation type
                            switch (operationType) {
                                case 'start':
                                    min_size = selected_capacity
                                    max_size = selected_capacity
                                    desired_size = selected_capacity
                                    break
                                case 'stop':
                                    min_size = "0" // Keep minSize as 1
                                    max_size = "1" // Limit maxSize to 1 
                                    desired_size = "0" // Set desiredSize to 0 to stop
                                    break
                                default:
                                    error("Invalid operation type: ${operationType}")
                            }
    
                            echo "Scaling node group ${eks_nodegroup} to desired capacity: ${desired_size} with min size: ${min_size} and max size: ${max_size}"
    
                            // Execute the scaling command
                            def scale_nodegroup = sh (
                                script: "aws eks update-nodegroup-config --cluster-name $eks_cluster --nodegroup-name $eks_nodegroup --scaling-config minSize=$min_size,maxSize=$max_size,desiredSize=$desired_size",
                                returnStdout: true
                            ).trim()
    
                            echo "Scaled node group $eks_nodegroup to desired capacity $desired_size with min size $min_size and max size $max_size"
                        } else {
                            echo "Node group ${eks_nodegroup} not found"
                        }
                    }
                }
            }
          }
        }
      }
    }
