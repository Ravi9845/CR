stage('Scale ECS Services Based on Cluster') {
    steps {
        script {
            withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                    
                    // Define the desired counts for services based on cluster
                    def desired_counts = [:]
                    if (ecs_cluster == "cluster1") {
                        desired_counts = [
                            "test": "1",
                            "bd": "2",
                            "rt": "3",
                            "ft": "4"
                        ]
                    } else if (ecs_cluster == "cluster2") {
                        desired_counts = [
                            "ui": "1",
                            "mj": "2",
                            "pt": "3",
                            "mt": "4"
                        ]
                    } else if (ecs_cluster == "cluster3") {
                        desired_counts = [
                            "serviceA": "1",
                            "serviceB": "2",
                            "serviceC": "3",
                            "serviceD": "4"
                        ]
                    } else if (ecs_cluster == "cluster4") {
                        desired_counts = [
                            "serviceE": "1",
                            "serviceF": "2",
                            "serviceG": "3",
                            "serviceH": "4"
                        ]
                    }

                    // Check the operation type (start or stop)
                    def operationType = op_ecs // This should be passed as a parameter
                    echo "Operation Type: ${operationType}" // Debugging output

                    // Iterate over the services in the desired_counts map and update their desired count
                    desired_counts.each { service, count ->
                        // Determine the desired count based on operation type
                        def desired_count = operationType == 'start' ? count : "0" // Use the desired count when starting, or set to zero when stopping

                        echo "Scaling service ${service} to desired count: ${desired_count}" // Debugging output

                        // Execute the scaling command
                        def scale_service = sh (
                            script: "aws ecs update-service --cluster $ecs_cluster --service $service --desired-count $desired_count",
                            returnStdout: true
                        ).trim()

                        echo "Scaled service $service in cluster $ecs_cluster to desired count $desired_count"
                    }
                }
            }
        }
    }
}
Operation Type: Start
[Pipeline] echo
Scaling service test01 to desired count: 0
[Pipeline] sh
+ aws ecs update-service --cluster test-cluster --service test01 --desired-count 0
[Pipeline] echo
Scaled service test01 in cluster test-cluster to desired count 0
[Pipeline] echo
Scaling service db-01 to desired count: 0
[Pipeline] sh
+ aws ecs update-service --cluster test-cluster --service db-01 --desired-count 0
[Pipeline] echo
Scaled service db-01 in cluster test-cluster to desired count 0
