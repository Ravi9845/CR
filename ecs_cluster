stage('Scale ECS Services Based on Cluster') {
    steps {
        script {
            withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                    
                    // Define the desired counts for services based on cluster
                    def desired_counts = [:]
                    if (ecs_cluster == "cluster1") {
                        desired_counts = [
                            "test": "1",
                            "bd": "2",
                            "rt": "3",
                            "ft": "4"
                        ]
                    } else if (ecs_cluster == "cluster2") {
                        desired_counts = [
                            "ui": "1",
                            "mj": "2",
                            "pt": "3",
                            "mt": "4"
                        ]
                    } else if (ecs_cluster == "cluster3") {
                        desired_counts = [
                            "serviceA": "1",
                            "serviceB": "2",
                            "serviceC": "3",
                            "serviceD": "4"
                        ]
                    } else if (ecs_cluster == "cluster4") {
                        desired_counts = [
                            "serviceE": "1",
                            "serviceF": "2",
                            "serviceG": "3",
                            "serviceH": "4"
                        ]
                    }

                    // Check the operation type (start or stop)
                    def operationType = op_ecs // This should be passed as a parameter
                    echo "Operation Type: ${operationType}" // Debugging output

                    // Iterate over the services in the desired_counts map and update their desired count
                    desired_counts.each { service, count ->
                        // Determine the desired count based on operation type
                        def desired_count = operationType == 'start' ? count : "0" // Use the desired count when starting, or set to zero when stopping

                        echo "Scaling service ${service} to desired count: ${desired_count}" // Debugging output

                        // Execute the scaling command
                        def scale_service = sh (
                            script: "aws ecs update-service --cluster $ecs_cluster --service $service --desired-count $desired_count",
                            returnStdout: true
                        ).trim()

                        echo "Scaled service $service in cluster $ecs_cluster to desired count $desired_count"
                    }
                }
            }
        }
    }
}
No RDS cluster was selected
[Pipeline] }
[Pipeline] // withAWS
[Pipeline] }
[Pipeline] // withAWS
[Pipeline] echo
Environment is now up and available. Please confirm applications are running properly
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Scale ECS Services Based on Cluster)
[Pipeline] script
[Pipeline] {
[Pipeline] withAWS
Setting AWS region us-east-1 
 Requesting assume role
Assuming role ARN is arn:aws:iam::222222222222222222:role/jenkins-pipeline-assume-roleAssumed role arn:aws:sts::22222222222222222:assumed-role/jd-pipeline-assume-role/Jenkins-AWSUtilities-Shutdown_Startup_Environment-test01-14 with id 1111111111111111111:Jenkins-AWSUtilities-Shutdown_Startup_Environment-test01-14 
 [Pipeline] {
[Pipeline] withAWS
Setting AWS region us-east-1 
 Requesting assume role
Assuming role ARN is arn:aws:iam::2222222222222222222222222:role/customer-environment-shutdown-startupAssumed role arn:aws:sts::222222222222222222:assumed-role/jd-environment-shutdown-startup/Jenkins-AWSUtilities-Shutdown_Startup_Environment-test01-14 with id 11111111111111111111111:Jenkins-AWSUtilities-Shutdown_Startup_Environment-test01-14 
 [Pipeline] {
[Pipeline] }
[Pipeline] // withAWS
[Pipeline] }
[Pipeline] // withAWS
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
org.jenkinsci.plugins.scriptsecurity.sandbox.RejectedAccessException: No such field found: field java.lang.String to
	at org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SandboxInterceptor.unclassifiedField(SandboxInterceptor.java:426)
	at org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SandboxInterceptor.onGetProperty(SandboxInterceptor.java:410)
	at org.kohsuke.groovy.sandbox.impl.Checker$7.call(Checker.java:353)
	at org.kohsuke.groovy.sandbox.impl.Checker.checkedGetProperty(Checker.java:357)
	at com.cloudbees.groovy.cps.sandbox.SandboxInvoker.getProperty(SandboxInvoker.java:29)
	at com.cloudbees.groovy.cps.impl.PropertyAccessBlock.rawGet(PropertyAccessBlock.java:20)
	at WorkflowScript.run(WorkflowScript:330)
	at ___cps.transform___(Native Method)
	at com.cloudbees.groovy.cps.impl.PropertyishBlock$ContinuationImpl.get(PropertyishBlock.java:74)
	at com.cloudbees.groovy.cps.LValueBlock$GetAdapter.receive(LValueBlock.java:30)
	at com.cloudbees.groovy.cps.impl.PropertyishBlock$ContinuationImpl.fixName(PropertyishBlock.java:66)
	at jdk.internal.reflect.GeneratedMethodAccessor719.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.cloudbees.groovy.cps.impl.ContinuationPtr$ContinuationImpl.receive(ContinuationPtr.java:72)
	at com.cloudbees.groovy.cps.impl.ConstantBlock.eval(ConstantBlock.java:21)
	at com.cloudbees.groovy.cps.Next.step(Next.java:83)
	at com.cloudbees.groovy.cps.Continuable$1.call(Continuable.java:174)
	at com.cloudbees.groovy.cps.Continuable$1.call(Continuable.java:163)
	at org.codehaus.groovy.runtime.GroovyCategorySupport$ThreadCategoryInfo.use(GroovyCategorySupport.java:136)
	at org.codehaus.groovy.runtime.GroovyCategorySupport.use(GroovyCategorySupport.java:275)
	at com.cloudbees.groovy.cps.Continuable.run0(Continuable.java:163)
	at org.jenkinsci.plugins.workflow.cps.SandboxContinuable.access$001(SandboxContinuable.java:18)
	at org.jenkinsci.plugins.workflow.cps.SandboxContinuable.run0(SandboxContinuable.java:51)
	at org.jenkinsci.plugins.workflow.cps.CpsThread.runNextChunk(CpsThread.java:185)
	at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup.run(CpsThreadGroup.java:403)
	at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup.access$400(CpsThreadGroup.java:97)
	at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup$2.call(CpsThreadGroup.java:315)
	at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup$2.call(CpsThreadGroup.java:279)
	at org.jenkinsci.plugins.workflow.cps.CpsVmExecutorService$2.call(CpsVmExecutorService.java:67)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at hudson.remoting.SingleLaneExecutorService$1.run(SingleLaneExecutorService.java:139)
	at jenkins.util.ContextResettingExecutorService$1.run(ContextResettingExecutorService.java:28)
	at jenkins.security.ImpersonatingExecutorService$1.run(ImpersonatingExecutorService.java:68)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Finished: FAILURE
