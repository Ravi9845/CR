               if (ecs_cluster == "test-dev-rt-ecs") {
                            rds_cluster1 = "test-dev-cluster"
                    } else if (ecs_cluster == "test12345-ecs-cluster" || ecs_cluster == "test123-cluster" || ecs_cluster == "test1234-cluster") {
                            rds_cluster1 = "test12345-rds-cluster"
                    } else if (ecs_cluster == "test123452-ecs-cluster") {
                            rds_cluster1 = "test123452-rds-cluster"
                    }
                if (rds_cluster1 == "RDS_CLUSTER1_NOT_FOUND") {
                       echo "No rds associated with ecs cluster $rds_cluster1. proceeding with desired capacity update on ecs cluster"
                } else {
                    def db_status = sh(
                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster1 --query DBClusters[0].Status | xargs",
                        returnStdout: true
                    ).trim()
                                    switch (op_ecs) {
                                        case "start":
                                            if (db_status == "available") {
                                                echo "RDS cluster $rds_cluster1 is already available. No action needed."
                                            } else {
                                                echo "Starting RDS cluster as ECS service is set to start."
                                                def db_start = sh(
                                                    script: "aws rds start-db-cluster --db-cluster-identifier $rds_cluster1 | xargs",
                                                    returnStdout: true
                                                ).trim()
                                                echo "RDS cluster $rds_cluster1 is starting..."

                                                // Wait for the RDS cluster to become available
                                                while (db_status != "available") {
                                                    echo "RDS Cluster not available. Waiting 60 seconds..."
                                                    sleep(60)
                                                    db_status = sh(
                                                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster1 --query DBClusters[0].Status | xargs",
                                                        returnStdout: true
                                                    ).trim()
                                                }
                                                echo "RDS cluster $rds_cluster1 is now available."
                                        
                                            }
                                            break

                                        case "stop":
                                        echo "No action needed associated with the selected ECS cluster: $rds_cluster1. Skipping rds update."
                                        break
                                    }
                }
                        def desired_counts = [:]
                        if (ecs_cluster == "ee-test") {
                            desired_counts = [
                                "callout-7": "2"
                            ]
                        } else if (ecs_cluster == "test12345-ecs-cluster") {
                            desired_counts = [
                                "test12345-33": "2",
                                "test12345-3": "1",
                                "test12345-4": "1",
                                "test12345-6": "2"
                            ]
                        } else if (ecs_cluster == "test123452-ecs-cluster") {
                            desired_counts = [
                                "test123452-33": "2",
                                "test123452-331": "1",
                                "test123452-11": "1",
                                "test123452-2": "2"
                            ]
                        } else if (ecs_cluster == "test-dev-rt-ecs") {
                            desired_counts = [
                                "test-w": "2",
                                "test-file-2": "2",
                                "test-ww": "2"
                            ]
                        } else if (ecs_cluster == "test12345-ty1e-atest12345in-cluster") {
                            desired_counts = [
                                "test12345-ty1e-atest12345in": "2",
                                "test123452-ty1e-atest12345in": "2"
                            ]
                        } else if (ecs_cluster == "dev-cnrportal") {
                            desired_counts = [
                                "test-GXC-V2-Service-IGw44VECR17L": "2"
                            ]
                        } else if (ecs_cluster == "test1234-cluster") {
                            desired_counts = [
                                "09-app-service": "2",
                                "09-ty1": "2"
                            ]
                        }  else if (ecs_cluster == "test123-cluster") {
                            desired_counts = [
                                "ty-covenant-db": "2",
                                "ty-ty1e1-db": "2",
                                "ty-unsc-db": "2"
                            ]
                        }      
                        // Check the operation type (start or stop)
                        def operationType = op_ecs
                        echo "Operation Type: ${operationType}"
    
                        // Iterate over the services in the desired_counts map and update their desired count
                        desired_counts.each { service, count ->
                            // Determine the desired count based on operation type
                            def desired_count = operationType == 'start' ? count : "0" // Use the desired count when starting, or set to zero when stopping
    
                            echo "Scaling service ${service} to desired count: ${desired_count}"
    
                            // Execute the scaling command
                            def scale_service = sh (
                                script: "aws ecs update-service --cluster $ecs_cluster --service $service --desired-count $desired_count",
                                returnStdout: true
                            ).trim()
    
                            echo "Scaled service $service in cluster $ecs_cluster to desired count $desired_count"
                        }
                    }
                }
              }
            } 
         }
    
