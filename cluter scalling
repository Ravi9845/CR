stage('Scale Up ASG') {
    steps {
        script {
            withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                    try {
                        // Mapping for user-friendly names to actual ASG names
                        def asgNameMap = [
                            "test56": "stack-123456",
                            "test89": "stack-crmjrlk0dcbvtnvzp-rtyu-erfd",
                            "test-ec2": "test-ec2",
                            "akash-asg": "akash-asg"
                        ]
                        
                        // Mapping for desired, min, and max capacities
                        def capacityMap = [
                            "stack-123456": [desired: 1, min: 1, max: 2],
                            "stack-crmjrlk0dcbvtnvzp-rtyu-erfd": [desired: 1, min: 1, max: 2],
                            "test-ec2": [desired: 1, min: 1, max: 2],
                            "akash-asg": [desired: 1, min: 1, max: 2]
                        ]

                        // Translate user-friendly ASG name to actual
          // Translate user-friendly ASG name to actual
                        if (!asgNameMap.containsKey(asg_name1)) {
                            error "Invalid ASG name '$asg_name1' provided. Please check the mapping."
                        }
                        def actualAsgName = asgNameMap[asg_name1]
                        
                        // Check if the actual ASG name exists in the capacity map
                        if (!capacityMap.containsKey(actualAsgName)) {
                            error "Capacity mapping for ASG '$actualAsgName' not found."
                        }

                        // Retrieve desired, minimum, and maximum capacities
                        def desired_cap = capacityMap[actualAsgName].desired
                        def min_cap = capacityMap[actualAsgName].min
                        def max_cap = capacityMap[actualAsgName].max
