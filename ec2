if (desired_counts_asg) {
                        desired_counts_asg.each { asg, count ->
                            def desired_cap_asg = count.desired
                            def min_cap_asg = count.min
                            def max_cap_asg = count.max
                            switch (op_ecs) {
                                case "start":
                                    echo "Updating ASG $asg: Desired Capacity: $desired_cap_asg, Minimum Capacity: $min_cap_asg, Maximum Capacity: $max_cap_asg"
                                    // Update the Auto Scaling Group using AWS CLI
                                    sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg --desired-capacity $desired_cap_asg --min-size $min_cap_asg --max-size $max_cap_asg", returnStdout: true)
                                    break
                                case "stop":
                                    sh(script: "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg --desired-capacity 0 --min-size 0  --max-size 0", returnStdout: true).trim()
                                    break
                            }
                        }
                    } else {
                        echo "No ASG associated with the selected ECS cluster: $ecs_cluster. Skipping ASG update."
                    }
