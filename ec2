stage('Scale ECS Services Based on Cluster') {   
        steps {
            script {
                withAWS(region: CICD_REGION, roleAccount: CICD_ACCOUNT_ID, role: CICD_REGION_ROLE, duration: 3600) {
                    withAWS(region: AWS_DEPLOYMENT_REGION, roleAccount: AWS_ACCOUNT_ID, role: AWS_IAM_ROLE_NAME, duration: 3600) {
                    if (ecs_cluster == "test-dev-novus-ecs") {
                            rds_cluster1 = "test-dev-cluster"
                    } else if (ecs_cluster == "test1-ecs-cluster" || "test1-t123-cluster") {
                            rds_cluster1 = "test1-rds-cluster"
                    } else if (ecs_cluster == "test2-ecs-cluster") {
                            rds_cluster1 = "test2-rds-cluster"
                    }
                    def db_status = sh(
                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster1 --query DBClusters[0].Status | xargs",
                        returnStdout: true
                    ).trim()
                                    switch (op_ecs) {
                                        case "start":
                                            if (db_status == "available") {
                                                echo "RDS cluster $rds_cluster1 is already available. No action needed."
                                            } else {
                                                echo "Starting RDS cluster as ECS service is set to start."
                                                def db_start = sh(
                                                    script: "aws rds start-db-cluster --db-cluster-identifier $rds_cluster1 | xargs",
                                                    returnStdout: true
                                                ).trim()
                                                echo "RDS cluster $rds_cluster1 is starting..."

                                                // Wait for the RDS cluster to become available
                                                while (db_status != "available") {
                                                    echo "RDS Cluster not available. Waiting 60 seconds..."
                                                    sleep(60)
                                                    db_status = sh(
                                                        script: "aws rds describe-db-clusters --db-cluster-identifier $rds_cluster1 --query DBClusters[0].Status | xargs",
                                                        returnStdout: true
                                                    ).trim()
                                                }
                                                echo "RDS cluster $rds_cluster1 is now available."
                                        
                                            }
                                            break

                                        case "stop":
                                        echo "No action needed associated with the selected ECS cluster: $rds_cluster1. Skipping rds update."
                                        break
