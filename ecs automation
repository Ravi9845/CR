 def desired_capacities = [
                        "test1": "1",
                        "test2": "4"
                        ]
    
                        // Check the operation type (start or stop)
                        def operationType = op_eks
                        echo "Operation Type: ${operationType}"

                        // Exit the stage early if operation type is none
                        if (operationType == 'none') {
                            echo "operationType is 'none', skipping the scaling step."
                            return
                        }
    
                        // Get the desired capacity for the selected node group
                        def selected_capacity = desired_capacities[eks_nodegroup]
    
                        if (selected_capacity != null) {
                            // Initialize scaling parameters
                            def min_size, max_size, desired_size
                        def asg_name = sh(
                            script: "aws eks describe-nodegroup --cluster-name $eks_cluster --nodegroup-name $eks_nodegroup --query 'nodegroup.resources.autoScalingGroups[0].name' --output text",
                            returnStdout: true
                        ).trim()

                        if (asg_name == "ASG_NOT_FOUND") {
                            echo "No asg associated with node group ${eks_nodegroup}. proceeding with desired capacity update on node group"
                        } else {
                        // Retrieve suspended processes for the ASG
                        def suspended_processes = sh(
                            script: "aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $asg_name --query 'AutoScalingGroups[0].SuspendedProcesses[*].ProcessName' --output text",
                            returnStdout: true
                        ).trim()

                        if (!suspended_processes.isEmpty()) {
                            echo "Suspended processes found for ASG ${asg_name}: ${suspended_processes}"
                            sh(script: "aws autoscaling resume-processes --auto-scaling-group-name $asg_name", returnStdout: true)
                            echo "Resumed suspended processes for ASG $asg_name"
                            // Optionally, resume processes here if necessary
                        } else {
                            echo "No suspended processes found for ASG ${asg_name}"
                        }
                    }
    
                            // Use switch to determine scaling parameters based on operation type
                            switch (operationType) {
                                case 'start':
                                    min_size = selected_capacity
                                    max_size = selected_capacity
                                    desired_size = selected_capacity
                                    break
                                case 'stop':
                                    min_size = "0" // Keep minSize as 1
                                    max_size = "1" // Limit maxSize to 1 
                                    desired_size = "0" // Set desiredSize to 0 to stop
                                    break
                                default:
                                    error("Invalid operation type: ${operationType}")
                            }
    
                            echo "Scaling node group ${eks_nodegroup} to desired capacity: ${desired_size} with min size: ${min_size} and max size: ${max_size}"
    
                            // Execute the scaling command
                            def scale_nodegroup = sh (
                                script: "aws eks update-nodegroup-config --cluster-name $eks_cluster --nodegroup-name $eks_nodegroup --scaling-config minSize=$min_size,maxSize=$max_size,desiredSize=$desired_size",
                                returnStdout: true
                            ).trim()
    
                            echo "Scaled node group $eks_nodegroup to desired capacity $desired_size with min size $min_size and max size $max_size"
                        } else {
                            echo "Node group ${eks_nodegroup} not found"
                        }
                    }
                }
            }
          }
        }
      }
    }
